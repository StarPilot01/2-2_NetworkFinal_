Protocol.proto(4,1): warning G1A4DC0EC: Import Enum.proto is unused.
  #pragma once
  #include "Protocol.pb.h"
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  #include "S1.h"
  #endif
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  // Utils Func
  class US1NetworkManager* GetWorldNetwork(const PacketSessionRef& Session);
  
  enum : uint16
  {
  	PKT_C_LOGIN = 1000,
  	PKT_S_LOGIN = 1001,
  	PKT_C_ENTER_GAME = 1002,
  	PKT_S_ENTER_GAME = 1003,
  	PKT_C_LEAVE_GAME = 1004,
  	PKT_S_LEAVE_GAME = 1005,
  	PKT_S_SPAWN = 1006,
  	PKT_S_DESPAWN = 1007,
  	PKT_C_MOVE = 1008,
  	PKT_S_MOVE = 1009,
  	PKT_C_CHAT = 1010,
  	PKT_S_CHAT = 1011,
  	PKT_C_REQ_MOVE = 1012,
  	PKT_S_RES_MOVE = 1013,
  	PKT_C_REQ_SHOOT = 1014,
  	PKT_S_RES_SHOOT = 1015,
  	PKT_C_REQ_ATTACK = 1016,
  	PKT_S_RES_ATTACK = 1017,
  	PKT_C_REQ_ENTER_ROOM = 1018,
  	PKT_S_ENTER_ROOM = 1019,
  	PKT_C_REQ_LOGIN = 1020,
  	PKT_S_DENY_LOGIN = 1021,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_S_LOGIN(PacketSessionRef& session, Protocol::S_LOGIN& pkt);
  bool Handle_S_ENTER_GAME(PacketSessionRef& session, Protocol::S_ENTER_GAME& pkt);
  bool Handle_S_LEAVE_GAME(PacketSessionRef& session, Protocol::S_LEAVE_GAME& pkt);
  bool Handle_S_SPAWN(PacketSessionRef& session, Protocol::S_SPAWN& pkt);
  bool Handle_S_DESPAWN(PacketSessionRef& session, Protocol::S_DESPAWN& pkt);
  bool Handle_S_MOVE(PacketSessionRef& session, Protocol::S_MOVE& pkt);
  bool Handle_S_CHAT(PacketSessionRef& session, Protocol::S_CHAT& pkt);
  bool Handle_S_RES_MOVE(PacketSessionRef& session, Protocol::S_RES_MOVE& pkt);
  bool Handle_S_RES_SHOOT(PacketSessionRef& session, Protocol::S_RES_SHOOT& pkt);
  bool Handle_S_RES_ATTACK(PacketSessionRef& session, Protocol::S_RES_ATTACK& pkt);
  bool Handle_S_ENTER_ROOM(PacketSessionRef& session, Protocol::S_ENTER_ROOM& pkt);
  bool Handle_S_DENY_LOGIN(PacketSessionRef& session, Protocol::S_DENY_LOGIN& pkt);
  
  class ClientPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_S_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LOGIN>(Handle_S_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_S_ENTER_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ENTER_GAME>(Handle_S_ENTER_GAME, session, buffer, len); };
  		GPacketHandler[PKT_S_LEAVE_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LEAVE_GAME>(Handle_S_LEAVE_GAME, session, buffer, len); };
  		GPacketHandler[PKT_S_SPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_SPAWN>(Handle_S_SPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_DESPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_DESPAWN>(Handle_S_DESPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_MOVE>(Handle_S_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_S_CHAT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_CHAT>(Handle_S_CHAT, session, buffer, len); };
  		GPacketHandler[PKT_S_RES_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_RES_MOVE>(Handle_S_RES_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_S_RES_SHOOT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_RES_SHOOT>(Handle_S_RES_SHOOT, session, buffer, len); };
  		GPacketHandler[PKT_S_RES_ATTACK] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_RES_ATTACK>(Handle_S_RES_ATTACK, session, buffer, len); };
  		GPacketHandler[PKT_S_ENTER_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ENTER_ROOM>(Handle_S_ENTER_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_S_DENY_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_DENY_LOGIN>(Handle_S_DENY_LOGIN, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::C_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_C_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_ENTER_GAME& pkt) { return MakeSendBuffer(pkt, PKT_C_ENTER_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_LEAVE_GAME& pkt) { return MakeSendBuffer(pkt, PKT_C_LEAVE_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_C_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_CHAT& pkt) { return MakeSendBuffer(pkt, PKT_C_CHAT); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_REQ_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_C_REQ_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_REQ_SHOOT& pkt) { return MakeSendBuffer(pkt, PKT_C_REQ_SHOOT); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_REQ_ATTACK& pkt) { return MakeSendBuffer(pkt, PKT_C_REQ_ATTACK); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_REQ_ENTER_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_C_REQ_ENTER_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_REQ_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_C_REQ_LOGIN); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  		SendBufferRef sendBuffer = MakeShared<SendBuffer>(packetSize);
  #else
  		SendBufferRef sendBuffer = make_shared<SendBuffer>(packetSize);
  #endif
  
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		pkt.SerializeToArray(&header[1], dataSize);
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  #pragma once
  #include "Protocol.pb.h"
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  #include "S1.h"
  #endif
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  // Utils Func
  class US1NetworkManager* GetWorldNetwork(const PacketSessionRef& Session);
  
  enum : uint16
  {
  	PKT_C_LOGIN = 1000,
  	PKT_S_LOGIN = 1001,
  	PKT_C_ENTER_GAME = 1002,
  	PKT_S_ENTER_GAME = 1003,
  	PKT_C_LEAVE_GAME = 1004,
  	PKT_S_LEAVE_GAME = 1005,
  	PKT_S_SPAWN = 1006,
  	PKT_S_DESPAWN = 1007,
  	PKT_C_MOVE = 1008,
  	PKT_S_MOVE = 1009,
  	PKT_C_CHAT = 1010,
  	PKT_S_CHAT = 1011,
  	PKT_C_REQ_MOVE = 1012,
  	PKT_S_RES_MOVE = 1013,
  	PKT_C_REQ_SHOOT = 1014,
  	PKT_S_RES_SHOOT = 1015,
  	PKT_C_REQ_ATTACK = 1016,
  	PKT_S_RES_ATTACK = 1017,
  	PKT_C_REQ_ENTER_ROOM = 1018,
  	PKT_S_ENTER_ROOM = 1019,
  	PKT_C_REQ_LOGIN = 1020,
  	PKT_S_DENY_LOGIN = 1021,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_C_LOGIN(PacketSessionRef& session, Protocol::C_LOGIN& pkt);
  bool Handle_C_ENTER_GAME(PacketSessionRef& session, Protocol::C_ENTER_GAME& pkt);
  bool Handle_C_LEAVE_GAME(PacketSessionRef& session, Protocol::C_LEAVE_GAME& pkt);
  bool Handle_C_MOVE(PacketSessionRef& session, Protocol::C_MOVE& pkt);
  bool Handle_C_CHAT(PacketSessionRef& session, Protocol::C_CHAT& pkt);
  bool Handle_C_REQ_MOVE(PacketSessionRef& session, Protocol::C_REQ_MOVE& pkt);
  bool Handle_C_REQ_SHOOT(PacketSessionRef& session, Protocol::C_REQ_SHOOT& pkt);
  bool Handle_C_REQ_ATTACK(PacketSessionRef& session, Protocol::C_REQ_ATTACK& pkt);
  bool Handle_C_REQ_ENTER_ROOM(PacketSessionRef& session, Protocol::C_REQ_ENTER_ROOM& pkt);
  bool Handle_C_REQ_LOGIN(PacketSessionRef& session, Protocol::C_REQ_LOGIN& pkt);
  
  class ServerPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_C_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LOGIN>(Handle_C_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_C_ENTER_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ENTER_GAME>(Handle_C_ENTER_GAME, session, buffer, len); };
  		GPacketHandler[PKT_C_LEAVE_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LEAVE_GAME>(Handle_C_LEAVE_GAME, session, buffer, len); };
  		GPacketHandler[PKT_C_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_MOVE>(Handle_C_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_C_CHAT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_CHAT>(Handle_C_CHAT, session, buffer, len); };
  		GPacketHandler[PKT_C_REQ_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_REQ_MOVE>(Handle_C_REQ_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_C_REQ_SHOOT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_REQ_SHOOT>(Handle_C_REQ_SHOOT, session, buffer, len); };
  		GPacketHandler[PKT_C_REQ_ATTACK] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_REQ_ATTACK>(Handle_C_REQ_ATTACK, session, buffer, len); };
  		GPacketHandler[PKT_C_REQ_ENTER_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_REQ_ENTER_ROOM>(Handle_C_REQ_ENTER_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_C_REQ_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_REQ_LOGIN>(Handle_C_REQ_LOGIN, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::S_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_S_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ENTER_GAME& pkt) { return MakeSendBuffer(pkt, PKT_S_ENTER_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LEAVE_GAME& pkt) { return MakeSendBuffer(pkt, PKT_S_LEAVE_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_SPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_SPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_DESPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_DESPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_S_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_CHAT& pkt) { return MakeSendBuffer(pkt, PKT_S_CHAT); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_RES_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_S_RES_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_RES_SHOOT& pkt) { return MakeSendBuffer(pkt, PKT_S_RES_SHOOT); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_RES_ATTACK& pkt) { return MakeSendBuffer(pkt, PKT_S_RES_ATTACK); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ENTER_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_S_ENTER_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_DENY_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_S_DENY_LOGIN); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  		SendBufferRef sendBuffer = MakeShared<SendBuffer>(packetSize);
  #else
  		SendBufferRef sendBuffer = make_shared<SendBuffer>(packetSize);
  #endif
  
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		pkt.SerializeToArray(&header[1], dataSize);
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Struct.pb.h
  1개 파일이 복사되었습니다.
  C:Struct.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ServerPacketHandler.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Struct.pb.h
  1개 파일이 복사되었습니다.
  C:Struct.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Struct.pb.h
  1개 파일이 복사되었습니다.
  C:Struct.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  pch.cpp
  Creature.cpp
  GameServer.cpp
  GameSession.cpp
  GameSessionManager.cpp
  Monster.cpp
  Object.cpp
  ObjectUtils.cpp
  Player.cpp
  Room.cpp
C:\Users\Chan\Projects\Unreal\2-2_NetworkFinal\Server\GameServer\Room.cpp(229,63): warning C4244: 'argument': conversion from 'uint64_t' to 'uint32_t', possible loss of data
  (compiling source file '/Room.cpp')
  
  RoomManager.cpp
  ServerPacketHandler.cpp
  Utils.cpp
  Generating Code...
  Enum.pb.cc
  Protocol.pb.cc
  Struct.pb.cc
  Generating Code...
  GameServer.vcxproj -> C:\Users\Chan\Projects\Unreal\2-2_NetworkFinal\Server\Binaries\Debug\GameServer.exe
